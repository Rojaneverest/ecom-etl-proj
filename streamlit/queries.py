# queries.py

# This CTE joins all the necessary DWH tables to create a flat, analytical view.
# It serves the same purpose as the 'FINAL_ORDERS_VIEW' mentioned in the requirements.
BASE_ANALYTICAL_CTE = """
WITH FinalView AS (
    SELECT
        o.ORDER_ID,
        o.CUSTOMER_ID,
        o.ORDER_STATUS,
        o.ORDER_PURCHASE_TIMESTAMP,
        o.ORDER_APPROVED_AT,
        o.ORDER_DELIVERED_CARRIER_DATE,
        o.ORDER_DELIVERED_CUSTOMER_DATE,
        o.ORDER_ESTIMATED_DELIVERY_DATE,
        oi.ORDER_ITEM_ID,
        oi.PRODUCT_ID,
        oi.SELLER_ID,
        oi.PRICE,
        oi.FREIGHT_VALUE,
        p.PRODUCT_CATEGORY_NAME,
        c.CUSTOMER_UNIQUE_ID,
        c.CUSTOMER_CITY,
        c.CUSTOMER_STATE,
        s.SELLER_CITY,
        s.SELLER_STATE,
        r.REVIEW_SCORE,
        r.REVIEW_CREATION_DATE
    FROM ECOM_DWH.PUBLIC.DWH_ORDERS o
    JOIN ECOM_DWH.PUBLIC.DWH_ORDER_ITEMS oi ON o.ORDER_ID = oi.ORDER_ID
    LEFT JOIN ECOM_DWH.PUBLIC.DWH_PRODUCTS p ON oi.PRODUCT_ID = p.PRODUCT_ID
    LEFT JOIN ECOM_DWH.PUBLIC.DWH_CUSTOMERS c ON o.CUSTOMER_ID = c.CUSTOMER_ID
    LEFT JOIN ECOM_DWH.PUBLIC.DWH_SELLERS s ON oi.SELLER_ID = s.SELLER_ID
    LEFT JOIN ECOM_DWH.PUBLIC.DWH_ORDER_REVIEWS r ON o.ORDER_ID = r.ORDER_ID
)
"""

def get_delivery_performance_query():
    """Query for delivery time analysis."""
    return f"""
-- Debug query to check raw data and timestamp formats
SELECT 
    'ORDERS' as table_name,
    ORDER_ID,
    ORDER_STATUS,
    TO_CHAR(ORDER_PURCHASE_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') as purchase_date,
    TO_CHAR(ORDER_DELIVERED_CUSTOMER_DATE, 'YYYY-MM-DD HH24:MI:SS') as delivery_date,
    TO_CHAR(ORDER_APPROVED_AT, 'YYYY-MM-DD HH24:MI:SS') as approved_date,
    TO_CHAR(ORDER_DELIVERED_CARRIER_DATE, 'YYYY-MM-DD HH24:MI:SS') as carrier_date,
    TO_CHAR(ORDER_ESTIMATED_DELIVERY_DATE, 'YYYY-MM-DD HH24:MI:SS') as estimated_date
FROM ECOM_DWH.PUBLIC.DWH_ORDERS
WHERE ORDER_PURCHASE_TIMESTAMP IS NOT NULL
AND ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
AND ORDER_PURCHASE_TIMESTAMP > DATEADD(year, -2, CURRENT_DATE())
LIMIT 10;

SELECT 
    'ORDER_ITEMS' as table_name,
    ORDER_ID,
    PRODUCT_ID,
    SELLER_ID,
    PRICE,
    FREIGHT_VALUE
FROM ECOM_DWH.PUBLIC.DWH_ORDER_ITEMS
LIMIT 10;

SELECT 
    'CUSTOMERS' as table_name,
    CUSTOMER_ID,
    CUSTOMER_UNIQUE_ID,
    CUSTOMER_CITY,
    CUSTOMER_STATE,
    CUSTOMER_ZIP_CODE_PREFIX
FROM ECOM_DWH.PUBLIC.DWH_CUSTOMERS
LIMIT 10;

SELECT 
    'SELLERS' as table_name,
    SELLER_ID,
    SELLER_CITY,
    SELLER_STATE
FROM ECOM_DWH.PUBLIC.DWH_SELLERS
LIMIT 10;
    """

def get_product_performance_query():
    """Query for product sales, reviews, and return risk."""
    return f"""
{BASE_ANALYTICAL_CTE}
SELECT
    PRODUCT_CATEGORY_NAME,
    AVG(REVIEW_SCORE) AS AVG_REVIEW_SCORE,
    COUNT(DISTINCT ORDER_ID) AS NUM_ORDERS,
    SUM(PRICE + FREIGHT_VALUE) AS TOTAL_REVENUE,
    COUNT_IF(REVIEW_SCORE <= 2) AS NUM_LOW_REVIEWS,
    (NUM_LOW_REVIEWS * 1.0 / NULLIF(NUM_ORDERS, 0)) AS RETURN_RISK_SCORE
FROM FinalView
WHERE PRODUCT_CATEGORY_NAME IS NOT NULL AND REVIEW_SCORE IS NOT NULL
GROUP BY PRODUCT_CATEGORY_NAME
HAVING NUM_ORDERS > 20 -- Filter for categories with a significant number of orders
ORDER BY TOTAL_REVENUE DESC;
    """

def get_customer_segmentation_query():
    """Query for aggregating customer data for segmentation."""
    return f"""
{BASE_ANALYTICAL_CTE}
SELECT
    CUSTOMER_UNIQUE_ID,
    COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS,
    MAX(ORDER_PURCHASE_TIMESTAMP) AS LAST_PURCHASE_DATE,
    SUM(PRICE + FREIGHT_VALUE) AS TOTAL_SPENT,
    AVG(REVIEW_SCORE) AS AVG_REVIEW,
    MIN(DATEDIFF(DAY, ORDER_DELIVERED_CUSTOMER_DATE, REVIEW_CREATION_DATE)) AS REVIEW_LAG_DAYS
FROM FinalView
WHERE 
    CUSTOMER_UNIQUE_ID IS NOT NULL
    AND ORDER_PURCHASE_TIMESTAMP IS NOT NULL
    AND ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
    AND PRICE > 0
    AND FREIGHT_VALUE > 0
    AND ORDER_ID IS NOT NULL
GROUP BY CUSTOMER_UNIQUE_ID
HAVING 
    LAST_PURCHASE_DATE IS NOT NULL
    AND TOTAL_ORDERS > 0
    AND TOTAL_SPENT > 0
    AND AVG_REVIEW IS NOT NULL;
    """

def get_sales_trends_query():
    """Query for monthly sales trends."""
    return f"""
    {BASE_ANALYTICAL_CTE}
    SELECT
        TO_CHAR(ORDER_PURCHASE_TIMESTAMP, 'YYYY-MM') AS ORDER_MONTH,
        CUSTOMER_STATE,
        PRODUCT_CATEGORY_NAME,
        SUM(PRICE + FREIGHT_VALUE) AS MONTHLY_REVENUE
    FROM FinalView
    GROUP BY 1, 2, 3
    ORDER BY 1, 2, 3;
    """